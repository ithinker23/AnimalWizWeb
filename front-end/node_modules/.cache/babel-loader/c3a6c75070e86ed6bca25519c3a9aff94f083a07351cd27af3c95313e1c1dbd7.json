{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ishan\\\\AnimalWizWeb\\\\front-end\\\\src\\\\ItemGridForm.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst formReducer = (state, event) => {\n  return {\n    ...state,\n    [event.target.name]: event.target.value\n  };\n};\nexport default function ItemGridForm(_ref) {\n  _s();\n  let {\n    updateMatchesDB,\n    setSelectedItems,\n    initData,\n    setData,\n    sellers,\n    headerTable,\n    setHeader\n  } = _ref;\n  const [formData, setFormData] = useReducer(formReducer, {});\n  async function handleSubmit(e) {\n    console.log(\"UPDATING ITEMS\");\n    e.preventDefault();\n    if (!(formData.pid === \"\" || formData.pid === undefined)) {\n      let init = initData;\n      sellers.forEach(async seller => {\n        let res = await axios.post(\"http://localhost:5000/items/getItems\", {\n          table: seller,\n          pid: formData.pid\n        });\n        init[seller] = {\n          data: res.data.rows,\n          seller: seller\n        };\n        setData(init);\n      });\n      let res = await axios.post(\"http://localhost:5000/items/getItems\", {\n        table: headerTable,\n        pid: formData.pid\n      });\n      if (res.data.rows[0] !== undefined) {\n        setHeader(res.data.rows[0]);\n        setSelectedItems(prev => {\n          prev[\"pid\"] = formData.pid;\n          return prev;\n        });\n      } else {\n        setHeader({\n          pid: null,\n          images: [],\n          title: \"\",\n          description: \"\",\n          price: \"\"\n        });\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n        className: \"gridForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"PID\", /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"pid\",\n            type: \"number\",\n            onChange: setFormData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"button\",\n          type: \"submit\",\n          onClick: handleSubmit,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button updateMatchesButton\",\n      onClick: updateMatchesDB,\n      children: \"UPDATE MATCHES\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(ItemGridForm, \"ucwA5txzD5euk5iYLwhlKhML4+o=\");\n_c = ItemGridForm;\nvar _c;\n$RefreshReg$(_c, \"ItemGridForm\");","map":{"version":3,"names":["axios","useReducer","formReducer","state","event","target","name","value","ItemGridForm","updateMatchesDB","setSelectedItems","initData","setData","sellers","headerTable","setHeader","formData","setFormData","handleSubmit","e","console","log","preventDefault","pid","undefined","init","forEach","seller","res","post","table","data","rows","prev","images","title","description","price"],"sources":["C:/Ishan/AnimalWizWeb/front-end/src/ItemGridForm.js"],"sourcesContent":["import axios from 'axios'\r\nimport { useReducer } from 'react'\r\n\r\n\r\nconst formReducer = (state, event) => {\r\n  return {\r\n    ...state,\r\n    [event.target.name]: event.target.value\r\n  }\r\n}\r\n\r\nexport default function ItemGridForm({updateMatchesDB, setSelectedItems, initData, setData, sellers, headerTable, setHeader }) {\r\n\r\n  const [formData, setFormData] = useReducer(formReducer, {})\r\n\r\n  async function handleSubmit(e) {\r\n    console.log(\"UPDATING ITEMS\")\r\n    e.preventDefault()\r\n    if (!(formData.pid === \"\" || formData.pid === undefined)) {\r\n      let init = initData\r\n      sellers.forEach(async (seller) => {\r\n        let res = await axios.post(\"http://localhost:5000/items/getItems\", { table: seller, pid: formData.pid })\r\n        init[seller] = {data:res.data.rows, seller:seller}\r\n        setData(init)\r\n      });\r\n\r\n      let res = await axios.post(\"http://localhost:5000/items/getItems\", {table: headerTable, pid: formData.pid})\r\n      if(res.data.rows[0] !== undefined){\r\n            setHeader(res.data.rows[0])\r\n        setSelectedItems(prev=>{\r\n          prev[\"pid\"] = formData.pid\r\n          return prev\r\n        })\r\n      }\r\n      else{\r\n        setHeader({pid: null, images:[], title:\"\", description:\"\", price:\"\"})\r\n      }\r\n    }\r\n  }\r\n\r\n  return (<>\r\n\r\n    <form>\r\n       <fieldset className='gridForm'>\r\n        <label>\r\n          PID\r\n          <input name=\"pid\" type=\"number\" onChange={setFormData} />\r\n        </label>\r\n        <div className='button' type=\"submit\" onClick={handleSubmit}>Submit</div>\r\n      </fieldset>\r\n\r\n    </form>\r\n    <div className='button updateMatchesButton' onClick={updateMatchesDB}>UPDATE MATCHES</div>\r\n\r\n  </>)\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,OAAO;AAAA;AAAA;AAGlC,MAAMC,WAAW,GAAG,CAACC,KAAK,EAAEC,KAAK,KAAK;EACpC,OAAO;IACL,GAAGD,KAAK;IACR,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI,GAAGF,KAAK,CAACC,MAAM,CAACE;EACpC,CAAC;AACH,CAAC;AAED,eAAe,SAASC,YAAY,OAA2F;EAAA;EAAA,IAA1F;IAACC,eAAe;IAAEC,gBAAgB;IAAEC,QAAQ;IAAEC,OAAO;IAAEC,OAAO;IAAEC,WAAW;IAAEC;EAAU,CAAC;EAE3H,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,UAAU,CAACC,WAAW,EAAE,CAAC,CAAC,CAAC;EAE3D,eAAegB,YAAY,CAACC,CAAC,EAAE;IAC7BC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7BF,CAAC,CAACG,cAAc,EAAE;IAClB,IAAI,EAAEN,QAAQ,CAACO,GAAG,KAAK,EAAE,IAAIP,QAAQ,CAACO,GAAG,KAAKC,SAAS,CAAC,EAAE;MACxD,IAAIC,IAAI,GAAGd,QAAQ;MACnBE,OAAO,CAACa,OAAO,CAAC,MAAOC,MAAM,IAAK;QAChC,IAAIC,GAAG,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAAC,sCAAsC,EAAE;UAAEC,KAAK,EAAEH,MAAM;UAAEJ,GAAG,EAAEP,QAAQ,CAACO;QAAI,CAAC,CAAC;QACxGE,IAAI,CAACE,MAAM,CAAC,GAAG;UAACI,IAAI,EAACH,GAAG,CAACG,IAAI,CAACC,IAAI;UAAEL,MAAM,EAACA;QAAM,CAAC;QAClDf,OAAO,CAACa,IAAI,CAAC;MACf,CAAC,CAAC;MAEF,IAAIG,GAAG,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAAC,sCAAsC,EAAE;QAACC,KAAK,EAAEhB,WAAW;QAAES,GAAG,EAAEP,QAAQ,CAACO;MAAG,CAAC,CAAC;MAC3G,IAAGK,GAAG,CAACG,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,KAAKR,SAAS,EAAC;QAC5BT,SAAS,CAACa,GAAG,CAACG,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC/BtB,gBAAgB,CAACuB,IAAI,IAAE;UACrBA,IAAI,CAAC,KAAK,CAAC,GAAGjB,QAAQ,CAACO,GAAG;UAC1B,OAAOU,IAAI;QACb,CAAC,CAAC;MACJ,CAAC,MACG;QACFlB,SAAS,CAAC;UAACQ,GAAG,EAAE,IAAI;UAAEW,MAAM,EAAC,EAAE;UAAEC,KAAK,EAAC,EAAE;UAAEC,WAAW,EAAC,EAAE;UAAEC,KAAK,EAAC;QAAE,CAAC,CAAC;MACvE;IACF;EACF;EAEA,oBAAQ;IAAA,wBAEN;MAAA,uBACG;QAAU,SAAS,EAAC,UAAU;QAAA,wBAC7B;UAAA,+BAEE;YAAO,IAAI,EAAC,KAAK;YAAC,IAAI,EAAC,QAAQ;YAAC,QAAQ,EAAEpB;UAAY;YAAA;YAAA;YAAA;UAAA,QAAG;QAAA;UAAA;UAAA;UAAA;QAAA,QACnD,eACR;UAAK,SAAS,EAAC,QAAQ;UAAC,IAAI,EAAC,QAAQ;UAAC,OAAO,EAAEC,YAAa;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAa;MAAA;QAAA;QAAA;QAAA;MAAA;IAChE;MAAA;MAAA;MAAA;IAAA,QAEN,eACP;MAAK,SAAS,EAAC,4BAA4B;MAAC,OAAO,EAAET,eAAgB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAqB;EAAA,gBAEzF;AACL;AAAC,GA5CuBD,YAAY;AAAA,KAAZA,YAAY;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}