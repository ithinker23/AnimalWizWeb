{"ast":null,"code":"var _jsxFileName = \"C:\\\\Ishan\\\\AnimalWizWeb\\\\front-end\\\\src\\\\ItemGridForm.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ItemGridForm(_ref) {\n  _s();\n  let {\n    updateMatchesDB,\n    setSelectedItems,\n    initData,\n    setData,\n    sellers,\n    headerTable,\n    setHeader\n  } = _ref;\n  const [pid, setPid] = useState(null);\n  const [pidList, setPidList] = useState([]);\n  useEffect(() => {\n    getItems();\n    getPidList();\n  }, [pid]);\n  async function getPidList() {\n    try {\n      let list = await (await axios.get(\"http://localhost:5000/items/getPidList\")).data.rows;\n      let newList = [];\n      list.forEach(pid => {\n        newList.append(pid.pid);\n      });\n      console.log(newList);\n    } catch (err) {\n      throw err;\n    }\n  }\n  async function getItems() {\n    console.log(\"UPDATING ITEMS\");\n    let init = initData;\n    sellers.forEach(async seller => {\n      let res = await axios.post(\"http://localhost:5000/items/getItems\", {\n        table: seller,\n        pid: pid\n      });\n      init[seller] = {\n        data: res.data.rows,\n        seller: seller\n      };\n      setData(init);\n    });\n    let res = await axios.post(\"http://localhost:5000/items/getItems\", {\n      table: headerTable,\n      pid: pid\n    });\n    if (res.data.rows[0] !== undefined) {\n      setHeader(res.data.rows[0]);\n      setSelectedItems(prev => {\n        prev[\"pid\"] = pid;\n        return prev;\n      });\n    } else {\n      setHeader({\n        pid: null,\n        images: [],\n        title: \"\",\n        description: \"\",\n        price: \"\"\n      });\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pidNav\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"navButton button\",\n        children: \"Prev\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"pidPrev\",\n        children: pid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 76\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"navButton button\",\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 114\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button updateMatchesButton\",\n      onClick: updateMatchesDB,\n      children: \"UPDATE MATCHES\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(ItemGridForm, \"RYume6ds5HcWXQNt+p9qTlAb1Qk=\");\n_c = ItemGridForm;\nvar _c;\n$RefreshReg$(_c, \"ItemGridForm\");","map":{"version":3,"names":["axios","useEffect","useState","ItemGridForm","updateMatchesDB","setSelectedItems","initData","setData","sellers","headerTable","setHeader","pid","setPid","pidList","setPidList","getItems","getPidList","list","get","data","rows","newList","forEach","append","console","log","err","init","seller","res","post","table","undefined","prev","images","title","description","price"],"sources":["C:/Ishan/AnimalWizWeb/front-end/src/ItemGridForm.js"],"sourcesContent":["import axios from 'axios'\r\nimport { useEffect, useState } from 'react'\r\n\r\nexport default function ItemGridForm({updateMatchesDB, setSelectedItems, initData, setData, sellers, headerTable, setHeader }) {\r\n\r\n  const [pid, setPid] = useState(null)\r\n  const [pidList, setPidList] = useState([])\r\n\r\n  useEffect(()=>{\r\n    getItems()\r\n    getPidList()\r\n  },[pid])\r\n\r\n  async function getPidList(){\r\n    try {\r\n      let list = await (await axios.get(\"http://localhost:5000/items/getPidList\")).data.rows\r\n      let newList = []\r\n      list.forEach(pid=>{\r\n        newList.append(pid.pid)\r\n      })\r\n      console.log(newList)\r\n    } catch (err){\r\n      throw err\r\n    }\r\n  }\r\n\r\n  async function getItems() {\r\n    console.log(\"UPDATING ITEMS\")\r\n      let init = initData\r\n      sellers.forEach(async (seller) => {\r\n        let res = await axios.post(\"http://localhost:5000/items/getItems\", { table: seller, pid: pid })\r\n        init[seller] = {data:res.data.rows, seller:seller}\r\n        setData(init)\r\n      });\r\n\r\n      let res = await axios.post(\"http://localhost:5000/items/getItems\", {table: headerTable, pid: pid})\r\n      if(res.data.rows[0] !== undefined){\r\n            setHeader(res.data.rows[0])\r\n        setSelectedItems(prev=>{\r\n          prev[\"pid\"] = pid\r\n          return prev\r\n        })\r\n      }\r\n      else{\r\n        setHeader({pid: null, images:[], title:\"\", description:\"\", price:\"\"})\r\n    }\r\n  }\r\n\r\n  return (<>\r\n        <div className='pidNav'><span class=\"navButton button\" >Prev</span><span className='pidPrev'>{pid}</span><span className='navButton button'>Next</span></div>\r\n        <div className='button updateMatchesButton' onClick={updateMatchesDB}>UPDATE MATCHES</div>\r\n  </>)\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}